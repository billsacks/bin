#!/bin/bash

# Bill Sacks
# 4-15-11

# This script creates a branch for a cesm component, along with doing
# all of the other work that needs to happen when creating a branch
# (creating a branch_tags directory, and making the first branch tag).
#
# The starting point for the branch will be the tag name associated
# with the current directory, unless another URL is specified.
#
# Usage: svn-make_cesm_branch branch_name description
#
# Run 'svn-make_cesm_branch -h' to get more detailed usage.


# ----------------------------------------------------------------------
# SOURCE EXTERNAL FUNCTIONS
# ----------------------------------------------------------------------

# Note that the following must be in your path, or the current directory

source do_cmd.bash

# ----------------------------------------------------------------------
# LOCAL FUNCTIONS DEFINED HERE
# ----------------------------------------------------------------------

function Usage {
    progname=`basename $0`
    echo "Usage: $progname [-dhs] [-u url] branch_name description"
    echo ""
    echo "This script creates a branch for a cesm component, along with doing"
    echo "all of the other work that needs to happen when creating a branch"
    echo "(creating a branch_tags directory, and making the first branch tag)."
    echo ""
    echo "'branch_name' is the name of the new branch (do NOT include full URL)."
    echo "'description' is used to create the svn logmsg."
    echo "   the full log messages will be something like:"
    echo "   branch:                'branch for <description>'"
    echo "   branch_tags directory: 'branch tags for <description>'"
    echo "   branch tag:            '<branch>: baseline tag corresponding to <copied_tag>'"
    echo ""
    echo "The tag that is copied to create the new branch can be given by -u URL,"
    echo "or else retrieved from the URL of the current directory."
    echo "In either case, the URL must be a trunk or branch tag, possibly with additional nesting."
    echo "For example, the URL can be of the form:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/drv/seq_mct/trunk_tags/drvseq3_1_51"
    echo "Or:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/drv/seq_mct/branch_tags/iens_neon_tags/iens_neon_03_drvseq3_1_47"
    echo "It can also have additional directories below the tag, as in:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/clm2/trunk_tags/clm4_0_20/models/lnd/clm"
    echo "The above is treated almost identically to:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/clm2/trunk_tags/clm4_0_20"
    echo "The only difference between the last two is in how the svn switch is done (if requested):"
    echo "the switch is done using the full path, including the additional directories below the tag name"
    echo ""
    echo "The following are optional arguments:"
    echo "[-d]: Do a dry run: echo svn commands that would be done,"
    echo "      but don't execute them."
    echo ""
    echo "[-h]: Print this help message and exit"
    echo ""
    echo "[-s]: After creating the new branch, svn switch the current"
    echo "      directory to this branch."
    echo "      (Only done if URL of current directory is the same as"
    echo "      the URL that is the starting point for the new branch"
    echo "      -- this will always be true if -u URL is NOT specified)"
    echo ""
    echo "[-u URL]: Use the specified URL as the starting point for"
    echo "          the new branch."
    echo "          (must be a trunk or branch tag, possibly with"
    echo "          additional nesting that is used for the svn switch)"
    echo "          (if not given, the script uses the URL of the current"
    echo "          directory, which must be a trunk or branch tag)"
    echo ""
    echo ""
    echo "Example: $progname -s coolbranch 'doing cool stuff'"
    echo "Also suppose that the URL of the current directory is:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/drv/seq_mct/trunk_tags/drvseq3_1_51"
    echo "This will create a branch by copying the drvseq3_1_51 tag."
    echo "The branch will be created in the following URL:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/drv/seq_mct/branches/coolbranch"
    echo "In addition, a corresponding branch_tags directory will be created,"
    echo "and a new branch tag will be created with the name:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/drv/seq_mct/branch_tags/coolbranch_tags/coolbranch_00_drvseq3_1_51"
    echo "Finally, because of the -s argument, the current directory"
    echo "will be svn switch'ed to:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/drv/seq_mct/branches/coolbranch"
    echo ""
    echo "Example: $progname -s coolerbranch 'doing even cooler stuff'"
    echo "Also suppose that the URL of the current directory is:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/clm2/branch_tags/tcens_tags/tcens02_clm4_0_32/models/lnd/clm"
    echo "(note additional nesting below the tag)"
    echo "This will create a branch by copying the tcens02_clm4_0_32 tag."
    echo "The branch will be created in the following URL:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/coolerbranch"
    echo "In addition, a corresponding branch_tags directory will be created,"
    echo "and a new branch tag will be created with the name:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/clm2/branch_tags/coolerbranch_tags/coolerbranch_00_tcens02_clm4_0_32"
    echo "Finally, because of the -s argument, the current directory"
    echo "will be svn switche'ed to:"
    echo "  https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/coolerbranch/models/lnd/clm"
    echo "(note the additional nesting below the branch name)"
    echo ""
}

# This function echoes the svn URL of the current directory.
# If there is an error, the error string is echoed.
function svn_url {
    local my_url
    
    # Get the line containing the URL from svn info:
    my_url=`svn info | grep "^URL: "`
    if [ $? -ne 0 ]; then
	echo "ERROR trying to obtain URL from svn info"
	return 1
    fi
    
    # get rid of the leading "URL: ", so we just have the URL itself
    my_url=${my_url/URL: /}

    echo $my_url
}

# ----------------------------------------------------------------------
# BEGIN MAIN SCRIPT
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# Handle command-line arguments
# ----------------------------------------------------------------------

# define default values:
dryrun=0
switch=0
source_url=""

while getopts dhsu: opt; do
    case $opt in
	d) dryrun=1;;
	h) Usage; exit;;
	s) switch=1;;
	u) source_url=$OPTARG;;
	\?) Usage; exit 1
    esac
done

# shift off the arguments we read with getopts:
shift `expr $OPTIND - 1`

if [[ $# -ne 2 ]]; then
    Usage
    exit 1
fi

branch=$1
description=$2

# Make sure branch name doesn't contain any non-word characters:
# The grep will return 0 if a non-word character is found, 1 if not:
echo "$branch" | grep '\W' > /dev/null
nonword=$?
if [ $nonword -eq 0 ]; then
    echo "ERROR: branch name cannot contain non-word characters"
    echo "branch specified: <${branch}>"
    exit 1
fi

# ----------------------------------------------------------------------
# If URL isn't specified, get current URL from svn
# ----------------------------------------------------------------------

if [ -z "$source_url" ]; then
    echo "Getting URL of current directory from svn:"

    source_url=$(svn_url)
    if [ $? -ne 0 ]; then
	# for non-zero return value, source_url holds the error string
	echo $source_url
	exit 1
    fi

    echo $source_url
    echo ""
fi

# ----------------------------------------------------------------------
# Get name of the tag for this URL, and determine root for 'branches' and 'branch_tags' directories
# ----------------------------------------------------------------------

cur_base=`basename $source_url`
last_base=''
cur_remainder=''  # everything to the right of cur_base in the path
last_remainder=''  # everything to the right of last_base in the path
root=`dirname $source_url`

declare -i numups
numups=0

# repeatedly go up a level until we find a root that ends with "trunk_tags" or "branch_tags"
until [[ `basename $root` = "trunk_tags" || `basename $root` = "branch_tags" ]]; do
    last_remainder=$cur_remainder
    cur_remainder="/${cur_base}${cur_remainder}"
    last_base=$cur_base
    cur_base=`basename $root`
    root=`dirname $root`
    numups=$numups+1

    if [[ $root = '.' || $root = 'https:' ]]; then
	echo "ERROR: URL does not appear to be a branch tag or trunk tag"
	echo "URL: $source_url"
	exit 1
    fi

    # Error checking: make sure loop invariants are still satisfied:
    if [[ ${root}/${cur_base}${cur_remainder} != $source_url ]]; then
	echo "ERROR: loop invariant violated:"
	echo "root: $root"
	echo "cur_base: $cur_base"
	echo "cur_remainder: $cur_remainder"
	echo "\${root}/\${cur_base}\${cur_remainder}: ${root}/${cur_base}${cur_remainder}"
	echo "source_url: $source_url"
	exit 1
    fi
    if [[ ${root}/${cur_base}/${last_base}${last_remainder} != $source_url ]]; then
	echo "ERROR: loop invariant violated:"
	echo "root: $root"
	echo "cur_base: $cur_base"
	echo "last_base: $last_base"
	echo "last_remainder: $last_remainder"
	echo "\${root}/\${cur_base}/\${last_base}\${last_remainder}: ${root}/${cur_base}/${last_base}${last_remainder}"
	echo "source_url: $source_url"
	exit 1
    fi
done

# Now cur_base gives the name one level below "trunk_tags" or
# "branch_tags", and last_base gives the name two levels below
# Also, cur_remainder gives the remainder of the path below cur_base,
# and last_remainder gives the remainder of the path below last_base
# (the remainders have leading slashes if they are not blank)

# Determine tag name of this URL based on whether this is a trunk tag
# or a branch tag
# If this is a trunk tag, then we expect the url to be of the form:
# <something>/trunk_tags/<some_tag>[/<something>]
# (the stuff in square brackets is optional, and given by 'cur_remainder')
# If this is a branch tag, then we expect the url to be of the form:
# <something>/branch_tags/<branch_name>_tags/<some_tag>[/<something>]
# (the stuff in square brackets is optional, and given by 'last_remainder')
if [[ `basename $root` = "trunk_tags" ]]; then
    curtag=$cur_base
    remainder=$cur_remainder
    sourcetag_url=${root}/${cur_base}  # url of the source up to and including the tag (i.e., discarding the remainder)
elif [[ `basename $root` = "branch_tags" ]]; then
    if [[ $numups -eq 0 ]]; then
	echo "ERROR: for branch tags, we expect one directory level between 'branch_tags' and the tag"
	echo "i.e., we expect <something>/branch_tags/<branch_name>_tags/<some_tag>[/<something>]"
	echo "but it seems we have <something>/branch_tags/<some_tag> in this case"
	echo "URL: $source_url"
	exit 1
    fi

    curtag=$last_base
    remainder=$last_remainder
    sourcetag_url=${root}/${cur_base}/${last_base}  # url of the source up to and including the tag (i.e., discarding the remainder)
else
    echo "ERROR: Unexpected basename for root:"
    echo `basename $root`
    exit 1
fi

# Make sure we set sourcetag_url and remainder properly
if [[ ${sourcetag_url}${remainder} != $source_url ]]; then
    echo "ERROR: something went wrong in setting sourcetag_url and/or remainder:"
    echo "sourcetag_url: $sourcetag_url"
    echo "remainder: $remainder"
    echo "\${sourcetag_url}\${remainder}: ${sourcetag_url}${remainder}"
    echo "source_url: $source_url"
    exit 1
fi

# If we get here, then all is good; go up one more level to get the actual root
root=`dirname $root`

echo "Copying from tag: $curtag"
echo "root: $root"
echo "remainder: $remainder"
echo ""

# ----------------------------------------------------------------------
# Determine full URLs for branch and branch tag, and log messages
# ----------------------------------------------------------------------

branch_url=$root/branches/$branch
tags_url=$root/branch_tags/${branch}_tags
this_tag_url=$tags_url/${branch}_00_$curtag

branch_msg="branch for $description"
tags_msg="branch tags for $description"
this_tag_msg="${branch}: baseline tag corresponding to $curtag"

# ----------------------------------------------------------------------
# Make sure desired branch doesn't already exist
# ----------------------------------------------------------------------

echo "Making sure desired branch doesn't already exist..."
result=`svn ls $root/branches | grep -w $branch`
# Note: unlike for other svn commands, we're not checking for an error in the svn command here
# (because a return status of 1 could just indicate that the grep failed to find anything)
if [ -n "$result" ]; then
    echo "ERROR: desired branch URL already exists!"
    echo "branch_url: $branch_url"
    exit 1
else
    echo "Good."
fi
echo ""

# Note: we don't have to explicitly check the desired branch_tags
# directory, because svn mkdir won't let us overwrite an existing
# directory.

# ----------------------------------------------------------------------
# Confirm planned changes with user, abort if user does not confirm
# ----------------------------------------------------------------------

# Note: if this is a dry run, we do not bother getting confirmation,
# but still print out the planned changes

if [ $dryrun -eq 0 ]; then
    echo "Please confirm planned copy:"
else
    echo "Dry run only; planned copy:"
fi

echo "From:    $sourcetag_url"
echo "To:      $branch_url"
echo "logmsg:  '$branch_msg'"
echo "New tag: $this_tag_url"
echo "logmsg:  '$this_tag_msg'"
echo ""

if [ $dryrun -eq 0 ]; then
    REPLY=""
    while [[ $REPLY != "n" && $REPLY != "N" && $REPLY != "y" && $REPLY != "Y" ]]; do
	read -p "Okay (y/n)? "
    done

    if [[ $REPLY = "n" || $REPLY = "N" ]]; then
	echo "Aborting"
	exit 0
    fi

    echo ""
fi

# ----------------------------------------------------------------------
# Make new branch
# ----------------------------------------------------------------------

do_cmd "svn cp $sourcetag_url $branch_url -m '$branch_msg'" $dryrun
if [ $? -ne 0 ]; then
    echo "ERROR creating new branch"
    exit 1
fi

echo ""

# ----------------------------------------------------------------------
# Make new branch tag
# ----------------------------------------------------------------------

do_cmd "svn mkdir $tags_url -m '$tags_msg'" $dryrun
if [ $? -ne 0 ]; then
    echo "ERROR creating new branch tags directory"
    exit 1
fi

echo ""

do_cmd "svn cp $branch_url $this_tag_url -m '$this_tag_msg'" $dryrun
if [ $? -ne 0 ]; then
    echo "ERROR creating new branch tag"
    exit 1
fi

echo ""

# ----------------------------------------------------------------------
# svn switch to the new branch, if desired
# ----------------------------------------------------------------------

if [ $switch -eq 1 ]; then
    cur_url=$(svn_url)
    if [ $? -ne 0 ]; then
	# for non-zero return value, cur_url holds the error string
	echo $cur_url
	exit 1
    fi

    if [[ $cur_url != $source_url ]]; then
	echo "WARNING: Refusing to svn switch when current URL differs from source URL"
	echo "WARNING: Current URL: $cur_url"
	echo "WARNING: Source URL:  $source_url"
	echo "WARNING: Please svn switch manually"
    else
	do_cmd "svn switch ${branch_url}${remainder}" $dryrun
	if [ $? -ne 0 ]; then
	    echo "ERROR svn switch'ing to branch"
	    exit 1
	fi
    fi

else  # switch flag not set
    echo "Switch flag not set"
    echo "You may now want to svn switch manually"
fi

# ----------------------------------------------------------------------
# Print any final messages
# ----------------------------------------------------------------------    

if [ $dryrun -ne 0 ]; then
    echo ""
    echo "NOTE: This was a dry run. If you are satisfied, please re-run without the '-d' switch."
fi