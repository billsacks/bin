#!/bin/bash

# Bill Sacks
# 1-3-11

# This script makes a new tag following the CESM tagging
# convention. The tag is a copy of the trunk or branch associated with
# the current URL, unless another URL is specified. The tag is placed
# in the associated trunk_tags or branch_tags directory. The tag name
# is determined by finding the most recent tag, and incrementing the
# tag number by one.

# Navigate until we get to .../trunk or .../branches -- if the latter,
# keep track of the last thing discarded, which is the branch name
# (DO THIS IN A FUNCTION, WHICH WILL BE SHARED WITH
# SVN-LIST_CESM_TAGS; note: a function can return a value with echo;
# see example 36-17 here
# <http://tldp.org/LDP/abs/html/assortedtips.html#MULTIPLICATION> for
# a trick to return multiple values  -- with this, can return the path
# .../trunk or .../branches, and the branch name if applicable; or,
# maybe more useful: return (1) the path .../trunk or
# .../branches/branch_name, and (2) the path of the corresponding tags
# directory, .../trunk_tags or .../branch_tags/branch_name_tags)
# UPDATE: a little script may be more appropriate than a function

# Determine the latest tag with:
# tst=`svn log -v https://svn-ccsm-models.cgd.ucar.edu/clm2/branch_tags/landice_diagnostics_tags/ | head -4 | tail -1`
# This will give something like: 
# A /clm2/branch_tags/landice_diagnostics_tags/landice_diagnostics_14_non2dgrid18_clm4_0_26 (from /clm2/branches/landice_diagnostics:31302)
# Then can extract (1) the tag name (as `basename $col2`) and (2) the
# revision number from which it was copied (by getting the number
# after the colon)

# Determine revision on which this latest tag was based
# Can do this with:
# Remove everything to the left of the colon:
# tst2=${tst#*:}
# Remove the ending ')':
# tst3=${tst2%)}
# OLD NOTES:  (is there an
# svn script to do this?)

# do an svn log from that revision to the head of the appropriate
# trunk / branch, so user can see the revisions included in this tag

# Create a search string to extract the tag number:
# Note that these search strings capture the tag number in \2,
# everything before the tag number in \1, and everything after the tag
# number in \3
# If we're in the trunk then:
# (tag number is the last set of digits after an underscore)
# (note that the '$', marking the end of the string, is in a group;
# this seems like a weird thing to do, but is done for consistency
# with the search_string for branches, allowing us to assume that we
# have three groupings: prefix, tag number, suffix)
# search_string='(.*_)(\d+)($)'
#
# Else (we're in a branch):
# (note that .*? is non-greedy search in perl -- so find the FIRST instance of
# _, followed by one or more digits, followed by _)
# search_string='(.*?_)(\d+)(_.*)'

# Get the tag number:
# tagnum=`echo $lasttag | search_string="$search_string" perl -pe 's/$ENV{'search_string'}/\2/'

# Add one to the tag number:
# let newtagnum=tagnum+1
# newtagnum=`printf "%02d" $newtagnum`

# Create a new tag
# Can do:
# newtag=`echo $lasttag | search_string="$search_string" newtagnum="$newtagnum" perl -pe 's/$ENV{'search_string'}/\1$ENV{'newtagnum'}\3/'
