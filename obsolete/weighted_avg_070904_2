#!/usr/bin/perl

# Bill Sacks
# 9/4/07

# This script is essentially a fancy wrapper for ncwa
# It computes weighted averages of the netcdf file $infile,
#  placing output in the netcdf file $outfile
# Averages are taken along a single dimension of $infile, given by $avg_dim
# If $num_points > 0, then we chop $avg_dim up into blocks of length $num_points,
#  and compute the average for each of these blocks
#  (e.g. if $avg_dim has length 100, and $num_points = 20, then we compute 5 separate averages)
#  Then we glue all these averages back together in the end, maintaining the $avg_dim dimension in the file
# 
# Example mask: "(month == 3 || month == 4 || month == 5)" [MAM]

use strict;
use File::Temp qw(tempfile);

# User-defined options:

my $infile = "clm3.5_control.clm2.h0.1998-2004.nc";
my $outfile = "clm3.5_control.clm2.h0.1998-2004.annualavg.nc";
my $avg_dim = "time"; # name of variable along which we should take average
my $num_points = 12;  # number of points to include in each average; 0 -> use all points
my $mask = "";  # must use ncap2 syntax; "" -> use all points
my $maskvar = "mask"; # name of new mask variable in netCDF file, if $mask != ""
# my $weightvar = "ndays"; # name of weighting variable (if "", no weighting)
my $weightvar = "";
my $other_options = "";  # any other options to ncwa

# End user-defined options

my $currfile = $infile;  # keep track of name of file that we're currently processing
my $maskcond = "";  # string specifying the masking condition for ncwa
my ($command, $weight_option, $num_points_actual);
if ($weightvar) {
  $weight_option = "-w $weightvar";
}
else {
  $weight_option = "";
}

# Do initial error checking:

# Make sure $outfile doesn't already exist:
if (-e $outfile) {
  die "$outfile already exists\n";
}

# Make sure $avg_dim exists in infile:
if (!var_in_file($infile, $avg_dim)) {
  die "$infile does not have avg_dim variable ($avg_dim)\n";
}

# And make sure $weightvar exists in infile:
if ($weightvar && !var_in_file($infile, $weightvar)) {
  die "$infile does not have weightvar variable ($weightvar)\n";
}

# And make sure $maskvar does NOT exist in infile:
if ($mask && var_in_file($infile, $maskvar)) {
  die "$infile already has maskvar field ($maskvar)\n";
}

# End initial error checking

my $dimlength = dimsize($infile, $avg_dim);
if ($dimlength < 0) {
  die "Error determining length of $avg_dim in $infile\nAre you sure $avg_dim is a dimension?\n";
}

if ($num_points == 0) {
  $num_points_actual = $dimlength;  # just do one average over all points
}
else {
  $num_points_actual = $num_points;
}
my $num_averages = int($dimlength/$num_points_actual);
if ($num_averages == 0) {
  die "Length of $avg_dim dimension ($dimlength) less than num_points ($num_points_actual)\n";
}

print "Length of $avg_dim dimension: $dimlength\n";
print "Performing $num_averages averages of length $num_points_actual\n";
if ($dimlength % $num_points_actual != 0) {
  print "Warning: dimension length not a multiple of num_points; ignoring last ", $dimlength - ($num_averages * $num_points_actual), " points.\n";
}

# add mask, if requested:
if ($mask) {
  my ($tempfh, $tempfname) = tempfile();
  $command = "ncap2 -O -s '$maskvar=$mask' $currfile $tempfname";
  print "Adding mask: $command\n";
  system "$command";
  $currfile = $tempfname;
  $maskcond = "-B '$maskvar == 1'";
}

# do all num_averages averages:
my $start_index = 0;
my $end_index = $num_points_actual - 1;
my @file_list = ();  # growing list of files containing averages
for (my $i = 0; $i < $num_averages; $i++) {
  my ($tempfh, $tempfname) = tempfile();
  $command = "ncwa -O -b -a $avg_dim -d $avg_dim,$start_index,$end_index $weight_option $maskcond $other_options $currfile $tempfname";
  # note that -b maintains the degenerate $avg_dim dimension
  print "Averaging: $command\n";
  system "$command";

  # make $avg_dim the record dimension in this file:
  print "Doing ncecat\n";
  system "ncecat -O $tempfname $tempfname"; # Add degenerate record dimension named "record"
  print "Doing ncpdq\n";
  system "ncpdq -O -a $avg_dim,record $tempfname $tempfname"; # Switch "record" and $avg_dim
  print "Doing ncwa\n";
  system "ncwa -O -a record $tempfname $tempfname"; # Remove (degenerate) "record"

  push (@file_list, $tempfname);
  $start_index += $num_points_actual;
  $end_index += $num_points_actual;
}

# finally, piece the averages together into a single file:
$command = "ncrcat -O @file_list $outfile";
print "Concatenating files: $command\n";
system "$command";




# var_in_file(filename, varname)
# Return true if the variable given by varname is in the netcdf file given by filename, 0 if not
sub var_in_file {
  my ($filename, $varname) = @_;
  my $result = system "ncdump -v $varname $filename > /dev/null 2>&1";
  # now result is 0 if no error (variable present), non-zero if error (variable absent)

  return (!$result);
}  


# dimsize(filename, dimname)
# Return length of the dimension given by dimname in the given netcdf file,
#  or -1 if this dimension doesn't exist in this file
#  (or if there is some other error - e.g. dimname isn't really a dimension)
sub dimsize {
  my ($filename, $dimname) = @_;
  my @result = `ncks -F -v $dimname $filename`;
  # now result contains header info, followed by a bunch of elements like "$dimname(#)=...",
  #  where each # is one index of the dimension (1-indexing)

  # starting with last line, go backwards until we find an element of the form "$dimname(#)..." at the start of the line
  #  note that we can't just use the last line, since it may be blank
  my $i = $#result;
  until ($i < 0 || $result[$i] =~ m/^ *$dimname\(\d+\)/) {
    $i--;
  }
  # Now, if i < 0, we never found a line like what we were looking for;
  #  otherwise, line $i is the last line of the form "$dimname(#)..."

  if ($i < 0) {
    return -1;  # error!
  }
  else {
    # do the same string match as above, but capture the number in $1:
    $result[$i] =~ m/^ *$dimname\((\d+)\)/;
    return $1;
  }
}
