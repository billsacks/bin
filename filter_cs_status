#!/usr/bin/perl

# Meant to take as input the output from a cs.status command.
# Prints important lines, and counts of ignored lines.

# Intended usage: cs.status.<whatever> | filter_cs_status

# Additional arguments can be given to give other regular expressions to ignore. For example:
#    cs.status.<whatever> | filter_cs_status nlcomp memcomp
# will ignore nlcomp and memcomp lines in addition to the standard ignored line

use strict;
use warnings;

my %counts;

# Note that we ignore the overall status - just looking at the status of individual pieces
my @ignores = ('^\s*$', '^ *---', '\(Overall:', '^ *DONE', '^ *PASS', '\.tputcomp\.', '^ *COMMENT', '^ *BFAIL_NA');
push @ignores, @ARGV;

print "========================================================================\n";

while (<STDIN>) {
   my $line = $_; 
   
   my $ignored = 0;
   foreach my $ignore_re (@ignores) {
      if ($line =~ /$ignore_re/) {
         $counts{$ignore_re}++;
         $ignored = 1;
         last;
      }
   }

   if (!($ignored)) {
      print $line;
   }
}

print "========================================================================\n";
print "Ignored lines:\n";
# Print ignores in the order in which they appear in the original array, since
# that mirrors the order in which the ignores are compared. That way, if a line
# contains multiple 'ignores', it's clear which element of the @ignores array is
# the one counted.
foreach my $key (@ignores) {
   if (defined $counts{$key}) {
      print "   $key : $counts{$key}\n";
   }
}
