#!/bin/sh
# -*- coding:utf-8;mode:shell-script;mode:font-lock -*-

# WJS (1-13-11): Original obtained from
# http://svn.apache.org/repos/asf/subversion/branches/scons-build-system/www/tools_contrib.html

##
# GNU diff wrapper for FileMerge.
#
# (FileMerge is a graphical diff tool in the Mac OS X Developer
# Tools.)
#
# Use this as a --diff-cmd argument to svn diff in order to view your
# diffs using FileMerge.
##
# Copyright (c) 2002 Wilfredo Sanchez Vega <wsanchez@wsanchez.net>.
# All rights reserved.
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHORS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
# PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
##

set -e
set -u

##
# Handle command line
##

usage ()
{
  program=$(basename "$0");

  if [ $# != 0 ]; then echo "$@"; echo ""; fi;

  echo "${program}: usage:";
  echo "    ${program} [options] -L label1 -L label2 file1 file2";
  echo "where the labels give what is displayed for each file,"
  echo "and the file names give the actual paths to the files"
  echo ""
  echo "To add options from svn diff, use something like:"
  echo "    svn diff --diff-cmd svn-viewdiff -x '[options]' ..."
  echo "";
  echo "options:";
  echo "  --help                     Print this help";
  echo "  --prefix                   append this prefix to each file, for display purposes"
  echo "                             (e.g., if you have multiple sets of diffs open at once,"
  echo "                             this can be used to group similar diffs together in the"
  echo "                             window menu, by giving them all the same prefix)"
  echo "                             (note: for readability, put a separator like '_' at the"
  echo "                             end of the prefix)"
  echo "  -c                         Ignored";
  echo "  -C --context X             Ignored";
  echo "  -u                         Ignored";
  echo "  -U --unified X             Ignored";
 #echo "  -p --show-c-function       Ignored";
 #echo "  -F --show-function-line X  Ignored";
  echo "  -q --brief                 Ignored";
  echo "  -y --side-by-side          Ignored";
  echo "  -w --width X               Ignored";
 #echo "  --left-column              Ignored";
 #echo "  --suppress-common-lines    Ignored";
  echo "  -l --paginate              Ignored";
  echo "  -t --expand-tabs           Ignored";
  echo "  -T --initial-tab           Ignored";
 #echo "  -r --recursive             Ignored";
  echo "  -d --minimal               Ignored";
  echo "  -H --speed-large-files     Ignored";
}

# Process arguments
declare -i labelnum
labelnum=0
prefix=""
while [ $# != 0 ]; do
  case "$1" in
    --help)
      usage;
      exit 0;
      ;;

# WJS (1-13-11): Added ability to create links to files with
# reasonable names
    -L|--label)
      shift 1;  # get rid of the "-L"
      # get the file name, up to the first whitespace character:
      declare -a labelarr=($1)  # turn $1 into an array, which splits
				# on whitespace
      label[$labelnum]=${labelarr[0]}  # just get the first element of
				# that array
      shift 1;  # shift the file name away
      labelnum+=1
      ;;

# Append a prefix to each file, which helps group windows together
    --prefix)
      shift 1; # get rid of the "--prefix"
      prefix=$1
      shift 1; # shift the prefix itself away
      ;;


    # These display options would not make sense for FileMerge
    -c                     ) shift 1; ;; # Context diff
    -C|--context           ) shift 2; ;; # Context diff
    -u                     ) shift 1; ;; # Unified diff
    -U|--unified           ) shift 2; ;; # Unified diff
   #-p|--show-c-function   ) shift 1; ;; #   C function names
   #-F|--show-function-line) shift 2; ;; #   Show recent line w/ regex
    -q|--brief             ) shift 1; ;; # Output only whether files differ
    -y|--side-by-side      ) shift 1; ;; # Output in two columns
    -w|--width             ) shift 2; ;; #   Max chars per line
   #--left-column          ) shift 1; ;; #   Left only if common
   #--suppress-common-lines) shift 1; ;; #   No output if common
    -l|--paginate          ) shift 1; ;; # Pass through pr
    -t|--expand-tabs       ) shift 1; ;; # Expand tabs
    -T|--initial-tab       ) shift 1; ;; # Add initial tab
   #-r|--recursive         ) shift 1; ;; # Recurse into directories
    -d|--minimal           ) shift 1; ;; # Try hard to minimize changes
    -H|--speed-large-files ) shift 1; ;; # Assume large files and small changes

    # Implement these
   #-s  --report-identical-files

    --|*) break; ;;
  esac;
done;

# WJS (1-13-11): Error checking: expect to have 2 labels
if [ $labelnum != 2 ]; then
    usage "Expect two label arguments"
    exit 1
fi

if [ $# != 2 ]; then
    usage "Invalid arguments: $*";
    exit 1;
fi;

file1="$1"; shift;
file2="$1"; shift;

# WJS (1-13-11): Create links to the actual files, with meaningful
# names. 

# First create a temporary directory to hold these links
linkdir=$(mktemp -d /tmp/viewdiff.links.XXXX)

# Now create a sub-directory for the first file. 
# Note that we put it in a "left" subdirectory so there aren't
# collisions with the second file.
# Note also that we need to explicitly create a directory structure
# based on the directory part of label[0]; otherwise the 'ln' command
# will fail for files in anything but the top-level directory.
dir=`dirname ${label[0]}`
base=`basename ${label[0]}`
mkdir -p $linkdir/left/$dir
# We try to do a link first, but if it fails (e.g., because of a
# cross-device link) then we do a copy instead
if !(ln "${file1}" "${linkdir}/left/${dir}/${prefix}${base}"); then
    echo "copying instead of linking"
    cp "${file1}" "${linkdir}/left/${dir}/${prefix}${base}"
fi
file1="${linkdir}/left/${dir}/${prefix}${base}"

# Now the same, but for the second file.
dir=`dirname ${label[1]}`
base=`basename ${label[1]}`
mkdir -p $linkdir/right/$dir
if !(ln "${file2}" "${linkdir}/right/${dir}/${prefix}${base}"); then
    echo "copying instead of linking"
    cp "${file2}" "${linkdir}/right/${dir}/${prefix}${base}"
fi
file2="${linkdir}/right/${dir}/${prefix}${base}"

# Done creating links to the actual files with meaningful names

##
# Do The Right Thing
##

#
# If opendiff isn't installed, you can't launch FileMerge.
# If we're not in the OS X Terminal, we probably can't run FileMerge
#
if ! type opendiff >& /dev/null || [ "${TERM_PROGRAM:=}" != "Apple_Terminal" ]; then
    diff "$@";
    exit $?;
fi;

merge="${file2}";

# WJS (1-13-11): It's possible that my above code, in which I create
# my own links, breaks the below code
tmp="";

if [ $(dirname "${file1}") == "/tmp" ]; then
    if [ -z "${tmp}" ]; then tmp=$(mktemp -d /tmp/viewdiff.XXXX); fi;

    ln "${file1}" "${tmp}/left";
    file1="${tmp}/left";
fi;

if [ $(dirname "${file2}") == "/tmp" ]; then
    if [ -z "${tmp}" ]; then tmp=$(mktemp -d /tmp/viewdiff.XXXX); fi;

    ln "${file2}" "${tmp}/right";
    file2="${tmp}/right";
    merge="";
fi;

echo opendiff "${file1}" "${file2}";
if [ -z "${merge}" ]; then
    opendiff "${file1}" "${file2}";
else
    opendiff "${file1}" "${file2}" -merge "${merge}";
fi;

sleep 2

# Give FileMerge some time before letting svn diff continue and possibly delete
# any temp files, or before deleting our own temp files.
# WJS (1-13-11): Added removal of the linkdir temporary directory
#  Since this is always present, I changed the above sleep to 2, and
#  removed the sleep statement from the below 'if' statement (before,
#  the above sleep was 1, and the sleep in the 'if' statement was 2).
rm -rf "${linkdir}"
if [ -n "${tmp}" ]; then (rm -rf "${tmp}") & fi;